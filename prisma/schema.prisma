// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  phone         String   @unique
  phoneVerified Boolean  @default(false)
  passwordHash  String?

  accessTokens  AccessToken[]
  refreshTokens RefreshToken[]
  profile       Profile?
  streams       Stream[]  @relation("streams")
  codes         VerificationCode[]

  Follower      Subscription[] @relation("follower")
  Author        Subscription[] @relation("author")
  invites       Stream[]       @relation("invites")

  @@map("users")
}

model AccessToken {
  id            String    @id @default(uuid())
  token         String
  expiresAt     DateTime
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String

  @@map("auth_access_tokens")
}

model RefreshToken {
  id            String    @id @default(uuid())
  token         String
  expiresAt     DateTime
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String

  @@map("auth_refresh_tokens")
}
  
model Profile {
  id                String      @id @default(uuid())
  username          String?     @unique
  firstname         String?
  lastname          String?
  birthday          DateTime?
  location          String?  
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
  categories        Category[]
  avatar            String?     @db.Text
  gallery           Gallery?    @relation("gallery")

  @@map("profiles")
}

model Category {
  id            String    @id @default(uuid())
  title         String
  profiles      Profile[]
  streams       Stream[]

  @@map("categories")
}

model Subscription {
  user_id       String
  subscriber_id String

  user          User    @relation("author", fields: [user_id], references: [id])
  subscriber    User    @relation("follower", fields: [subscriber_id], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([user_id, subscriber_id])
  @@index([user_id])
  @@index([subscriber_id])
  @@map("subscription")
}

model Stream {
  id                String       @id @default(uuid())
  user_id           String
  cover             String?
  title             String
  description       String?
  language          String
  categories        Category[]
  price_type        String      @default("ticket")  // ticket or rate
  price             Float       @default(0.001)
  start_now         Boolean     @default(false)
  start_time        DateTime?
  duration          Int?
  charity           Int?
  invited           User[]      @relation("invites")
  is_private        Boolean     @default(false)
  comments_off      Boolean     @default(false)
  room              String?
  created_at        DateTime    @default(now())

  user              User        @relation("streams", fields: [user_id], references: [id])

  @@map("streams")
}

model VerificationCode {
  id          String    @id @default(uuid())
  code        String
  type        String
  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
  created_at  DateTime  @default(now())
  expired_at  DateTime  @default(now())

  @@map("verification_code")
}

model Gallery {
  id             String    @id @default(uuid())
  profile_id     String    @unique
  profile        Profile   @relation("gallery", fields: [profile_id], references: [id])
  items          GalleryItem[]

  @@map("galleries")
}

model GalleryItem {
  id          String    @id @default(uuid())
  key         String    @db.Text
  gallery_id  String
  gallery     Gallery   @relation(fields: [gallery_id], references: [id])

  @@map("gallery_items")
}
